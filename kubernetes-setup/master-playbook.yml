---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker
  
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=10.244.0.0/16

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config      
  
  - name: Install flannel pod network
    become: false
    command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
  
  - name: Retrieve helm binary archive.
    unarchive:
       src: https://get.helm.sh/helm-v3.2.1-linux-amd64.tar.gz
       dest: /tmp
       creates: /usr/local/bin/helm
       remote_src: yes

  - name: Move helm binary into place.
    command: cp /tmp/linux-amd64/helm /usr/local/bin/helm
    args:
     creates: /usr/local/bin/helm 

  - name: Install pip3
    apt:
      name: "python3-pip"
      state: present
      update_cache: yes

  - name: Ensure K8s module dependencies are installed.
    pip:
      name: openshift
      state: present
  - name: Ensure the jenkins Namespace exists.
    become: yes
    become_user: vagrant
    kubernetes.core.k8s:
      api_version: v1
      kind: Namespace
      name: jenkins
      state: present  

  - name: Ensure the Jenkins Service exists in the jenkins Namespace.
    become: yes
    become_user: vagrant  
    kubernetes.core.k8s:
       state: present
       definition:
         apiVersion: v1
         kind: Service
         metadata:
          name: jenkins
          namespace: jenkins
         spec:
           type: LoadBalancer
           ports:
           - port: 8080
             targetPort: 8080
           selector:
             app: jenkins

  - name: Ensure the nexus Namespace exists.
    become: yes
    become_user: vagrant
    kubernetes.core.k8s:
      api_version: v1
      kind: Namespace
      name: nexus
      state: present             
  - name: Ensure the nexus Service exists in the nexus Namespace.
    become: yes
    become_user: vagrant  
    kubernetes.core.k8s:
       state: present
       definition:
         apiVersion: v1
         kind: Service
         metadata:
          name: nexus
          namespace: nexus
         spec:
           type: LoadBalancer
           ports:
           - port: 8081
             targetPort: 8081
           selector:
             app: nexus
           
  handlers:
   - name: docker status
     service: name=docker state=started



